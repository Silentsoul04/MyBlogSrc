---
title: glide 包依赖管理
layout: post
category: golang
author: 夏泽民
---
<!-- more -->
Golang亦有godep、govendor、glide、gvt、gopack等等

Go 语言原生包管理的缺陷：
能拉取源码的平台很有限，绝大多数依赖的是 github.com
不能区分版本，以至于令开发者以最后一项包名作为版本划分
依赖 列表/关系 无法持久化到本地，需要找出所有依赖包然后一个个 go get
只能依赖本地全局仓库（GOPATH/GOROOT），无法将库放置于局部仓库（$PROJECT_HOME/vendor）

Go 提供了原始的 go get ，让第三方包管理可以基于 go get 做扩展。GO15VENDOREXPERIMENT 特性让局部依赖成为现实。Go 官方在给第三方包管理营造条件以及引导开发者用户至所推荐的方向，促进社区的繁荣。证明了一个语言技术的生态不仅仅只能靠官方或者取决于官方的完善程度。

//设置环境变量 使用vendor目录
GO15VENDOREXPERIMENT=1

glide
几大主要功能：
持久化依赖列表至配置文件中，包括依赖版本（支持范围限定）以及私人仓库等
持久化关系树至 lock 文件中（类似于 yarn 和 cargo），以重复拉取相同版本依赖
兼容 go get 所支持的版本控制系统：Git, Bzr, HG, and SVN
支持 GO15VENDOREXPERIMENT 特性，使得不同项目可以依赖相同项目的不同版本
可以导入其他工具配置，例如： Godep, GPM, Gom, and GB

安装glide
$ go get github.com/Masterminds/glide
$ go install github.com/Masterminds/glide

初始化 (glide init)
 glide.yaml记载了依赖包的列表及其更新规则，每次执行 glide up 时，都会按照指定的规则（如只下载补丁(patch)不下载升级(minor)）下载新版。
 
安装依赖 (glide install)

$ glide mirror set golang.org/x/crypto github.com/golang/crypto
