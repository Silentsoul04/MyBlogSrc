<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泽民博客</title>
    <description>夏泽民的个人主页，学习笔记。</description>
    <link>https://xiazemin.github.io/MyBlog/</link>
    <atom:link href="https://xiazemin.github.io/MyBlog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 29 Sep 2017 11:53:17 +0800</pubDate>
    <lastBuildDate>Fri, 29 Sep 2017 11:53:17 +0800</lastBuildDate>
    <generator>Jekyll v3.6.0.pre.beta1</generator>
    
      <item>
        <title>scala_main_class</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;解决
错误: 找不到或无法加载主类 SparkTest.SparkSessionTest&lt;/p&gt;

&lt;p&gt;project-&amp;gt;buildin path-&amp;gt; configure build in path 
-&amp;gt;scala compiler -&amp;gt;use project settings -&amp;gt;scala installation
-&amp;gt; dixed scala installation 2.11.8 built in&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/spark/2017/09/29/scala_main_class.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/spark/2017/09/29/scala_main_class.html</guid>
        
        
        <category>spark</category>
        
      </item>
    
      <item>
        <title>alibaba_fast_json</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;Fastjson是一个Java语言编写的高性能功能完善的JSON库。将解析json的性能提升到极致，是目前Java语言中最快的JSON库。Fastjson接口简单易用，已经被广泛使用在缓存序列化、协议交互、Web输出、Android客户端等多种应用场景。&lt;/p&gt;

&lt;p&gt;GitHub下载地址: 
https://github.com/alibaba/fastjson&lt;/p&gt;

&lt;p&gt;最新发布版本jar包 1.2.23 下载地址: https://search.maven.org/remote_content?g=com.alibaba&amp;amp;a=fastjson&amp;amp;v=LATEST&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.alibaba.fastjson.JSON&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastJsonExp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]){&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;chenggang\&amp;quot;,\&amp;quot;age\&amp;quot;:24}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//反序列化&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7 &lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;, age:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8 &lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Fri, 29 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/spark/2017/09/29/alibaba_fast_json.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/spark/2017/09/29/alibaba_fast_json.html</guid>
        
        
        <category>spark</category>
        
      </item>
    
      <item>
        <title>gorpc</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;gRPC初体验
96  作者 CZ_Golang 关注
2016.03.11 16:38 字数 1629 阅读 16506评论 2喜欢 29
gRPC是由Google主导开发的RPC框架，使用HTTP/2协议并用ProtoBuf作为序列化工具。其客户端提供Objective-C、Java接口，服务器侧则有Java、Golang、C++等接口，从而为移动端（iOS/Androi）到服务器端通讯提供了一种解决方案。 当然在当下的环境下，这种解决方案更热门的方式是RESTFull API接口。该方式需要自己去选择编码方式、服务器架构、自己搭建框架（JSON-RPC）。gRPC官方对REST的声音是：&lt;/p&gt;

&lt;p&gt;和REST一样遵循HTTP协议(明确的说是HTTP/2)，但是gRPC提供了全双工流
和传统的REST不同的是gRPC使用了静态路径，从而提高性能
用一些格式化的错误码代替了HTTP的状态码更好的标示错误
至于是否要选择用gRPC。对于已经有一套方案的团队，可以参考下。如果是从头来做，可以考虑下gRPC提供的从客户端到服务器的整套解决方案，这样不用客户端去实现http的请求会话，JSON等的解析，服务器端也有现成的框架用。从15年3月到现在gRPC也发展了一年了，慢慢趋于成熟。下面我们就以gRPC的Golang版本看下其在golang上面的表现。至于服务端的RPC，感觉golang标准库的RPC框架基本够用了,没必要再去用另一套方案。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装protobuf&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然gRPC也支持protobuf2.x，但是建议还是使用protobuf3.x，尽管还没有正式版本，不过golang版本基本没有什么问题，另外3.x官方支持了Objective-C，这也是我们使用gRPC的初衷：提供一个移动端到服务器的解决方案。去到Protocol Buffers下载最新版本（Version3.0.0 beta2），然后解压到本地。本地需要已经安装好autoconf automake libtool.rpm系列（fedora/centos/redheat）可以用yum安装。Mac上可以用brew进行安装&lt;/p&gt;

&lt;p&gt;brew install autoconf automake libtool
然后执行&lt;/p&gt;

&lt;p&gt;./configure –prefix=your_pb_install_path
接着&lt;/p&gt;

&lt;p&gt;make 
make install
set your_pb_install_path to your $PATH
检查是否安装完成&lt;/p&gt;

&lt;p&gt;protoc –version
libprotoc 3.0.0
然后安装golang protobuf直接使用golang的get即可&lt;/p&gt;

&lt;p&gt;go get -u github.com/golang/protobuf/proto // golang protobuf 库
go get -u github.com/golang/protobuf/protoc-gen-go //protoc –go_out 工具&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;安装gRPC-go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;gRPC-go可以通过golang 的get命令直接安装，非常方便。&lt;/p&gt;

&lt;p&gt;go get google.golang.org/grpc
这里大家可能比较奇怪，为什么gRPC-go在github的地址是”https://github.com/grpc/grpc-go”,但是为什么要用“google.golang.org/grpc”进行安装呢？应该grpc原本是google内部的项目，归属golang，就放在了google.golang.org下面了，后来对外开放，又将其迁移到github上面了，又因为golang比较坑爹的import路径规则，所以就都没有改路径名了。&lt;/p&gt;

&lt;p&gt;但是这样就有个问题了。要如何去管理版本呢？这个目前我还没有什么比较好的方法，希望知道的朋友一起分享下。目前想到一个方法是手动下载某个版本，然后写个脚本统一修改代码中的import里面的路径.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;示例程序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.1 protobuf&lt;/p&gt;

&lt;p&gt;该示例源自gRPC-go的examples的helloworld。先看PB的描述：&lt;/p&gt;

&lt;p&gt;syntax = “proto3”;&lt;/p&gt;

&lt;p&gt;option objc_class_prefix = “HLW”;&lt;/p&gt;

&lt;p&gt;package helloworld;&lt;/p&gt;

&lt;p&gt;// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}&lt;/p&gt;

&lt;p&gt;// The request message containing the user’s name.
message HelloRequest {
  string name = 1;
}&lt;/p&gt;

&lt;p&gt;// The response message containing the greetings
message HelloReply {
  string message = 1;
}
这里定义了一个服务Greeter，其中有个API SayHello。其接受参数为HelloRequest类型，返回HelloReply类型。这里HelloRequest和HelloReply就是普通的PB定义&lt;/p&gt;

&lt;p&gt;服务定义为：&lt;/p&gt;

&lt;p&gt;// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}
service定义了一个server。其中的接口可以是四种类型&lt;/p&gt;

&lt;p&gt;rpc GetFeature(Point) returns (Feature) {}
类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.
rpc ListFeatures(Rectangle) returns (stream Feature) {}
客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素
rpc RecordRoute(stream Point) returns (RouteSummary) {}
客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应
rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构
后面三种可以参考官方的route_guide示例。&lt;/p&gt;

&lt;p&gt;使用protoc命令生成相关文件：&lt;/p&gt;

&lt;p&gt;protoc –go_out=plugins=grpc:. helloworld.proto
ls
helloworld.pb.go    helloworld.proto
生成对应的pb.go文件。这里用了plugins选项，提供对grpc的支持，否则不会生成Service的接口。&lt;/p&gt;

&lt;p&gt;3.2 服务器端程序&lt;/p&gt;

&lt;p&gt;然后编辑服务器端程序：&lt;/p&gt;

&lt;p&gt;package main&lt;/p&gt;

&lt;p&gt;import (
    “log”
    “net”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pb &quot;your_path_to_gen_pb_dir/helloworld&quot;
&quot;golang.org/x/net/context&quot;
&quot;google.golang.org/grpc&quot; )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;const (
    port = “:50051”
)&lt;/p&gt;

&lt;p&gt;// server is used to implement helloworld.GreeterServer.
type server struct{}&lt;/p&gt;

&lt;p&gt;// SayHello implements helloworld.GreeterServer
func (s &lt;em&gt;server) SayHello(ctx context.Context, in *pb.HelloRequest) (&lt;/em&gt;pb.HelloReply, error) {
    return &amp;amp;pb.HelloReply{Message: “Hello “ + in.Name}, nil
}&lt;/p&gt;

&lt;p&gt;func main() {
    lis, err := net.Listen(“tcp”, port)
    if err != nil {
        log.Fatalf(“failed to listen: %v”, err)
    }
    s := grpc.NewServer()
    pb.RegisterGreeterServer(s, &amp;amp;server{})
    s.Serve(lis)
}
这里首先定义一个server结构，然后实现SayHello的接口，其定义在“your_path_to_gen_pb_dir/helloworld”&lt;/p&gt;

&lt;p&gt;SayHello(context.Context, &lt;em&gt;HelloRequest) (&lt;/em&gt;HelloReply, error)
然后调用grpc.NewServer() 创建一个server s。接着注册这个server s到结构server上面 pb.RegisterGreeterServer(s, &amp;amp;server{}) 最后将创建的net.Listener传给s.Serve()。就可以开始监听并服务了，类似HTTP的ListenAndServe。&lt;/p&gt;

&lt;p&gt;3.3 客户端程序&lt;/p&gt;

&lt;p&gt;客户端程序：&lt;/p&gt;

&lt;p&gt;package main&lt;/p&gt;

&lt;p&gt;import (
    “log”
    “os”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pb &quot;your_path_to_gen_pb_dir/helloworld&quot;
&quot;golang.org/x/net/context&quot;
&quot;google.golang.org/grpc&quot; )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;const (
    address     = “localhost:50051”
    defaultName = “world”
)&lt;/p&gt;

&lt;p&gt;func main() {
    // Set up a connection to the server.
    conn, err := grpc.Dial(address, grpc.WithInsecure())
    if err != nil {
        log.Fatalf(“did not connect: %v”, err)
    }
    defer conn.Close()
    c := pb.NewGreeterClient(conn)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Contact the server and print out its response.
name := defaultName
if len(os.Args) &amp;gt; 1 {
    name = os.Args[1]
}
r, err := c.SayHello(context.Background(), &amp;amp;pb.HelloRequest{Name: name})
if err != nil {
    log.Fatalf(&quot;could not greet: %v&quot;, err)
}
log.Printf(&quot;Greeting: %s&quot;, r.Message) } 这里通过pb.NewGreeterClient()传入一个conn创建一个client，然后直接调用client上面对应的服务器的接口
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SayHello(context.Context, &lt;em&gt;HelloRequest) (&lt;/em&gt;HelloReply, error)
接口，返回*HelloReply 对象。&lt;/p&gt;

&lt;p&gt;先运行服务器，在运行客户端，可以看到。&lt;/p&gt;

&lt;p&gt;./greeter_server &amp;amp;&lt;/p&gt;

&lt;p&gt;./greeter_client
2016/03/10 21:42:19 Greeting: Hello world&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/09/25/gorpc.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/09/25/gorpc.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>spark-kafka</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;参考文档：
https://spark.apache.org/docs/latest/structured-streaming-kafka-integration.html&lt;/p&gt;

&lt;p&gt;Reading Data from Kafka
Creating a Kafka Source for Streaming Queries
Scala
Java
Python
// Subscribe to 1 topic
val df = spark
  .readStream
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .option(“subscribe”, “topic1”)
  .load()
df.selectExpr(“CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .as[(String, String)]&lt;/p&gt;

&lt;p&gt;// Subscribe to multiple topics
val df = spark
  .readStream
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .option(“subscribe”, “topic1,topic2”)
  .load()
df.selectExpr(“CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .as[(String, String)]&lt;/p&gt;

&lt;p&gt;// Subscribe to a pattern
val df = spark
  .readStream
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .option(“subscribePattern”, “topic.*”)
  .load()
df.selectExpr(“CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .as[(String, String)]&lt;/p&gt;

&lt;p&gt;Writing Data to Kafka&lt;/p&gt;

&lt;p&gt;Creating a Kafka Sink for Streaming Queries
Scala
Java
Python
// Write key-value data from a DataFrame to a specific Kafka topic specified in an option
val ds = df
  .selectExpr(“CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .writeStream
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .option(“topic”, “topic1”)
  .start()&lt;/p&gt;

&lt;p&gt;// Write key-value data from a DataFrame to Kafka using a topic specified in the data
val ds = df
  .selectExpr(“topic”, “CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .writeStream
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .start()
Writing the output of Batch Queries to Kafka
Scala
Java
Python
// Write key-value data from a DataFrame to a specific Kafka topic specified in an option
df.selectExpr(“CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .write
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .option(“topic”, “topic1”)
  .save()&lt;/p&gt;

&lt;p&gt;// Write key-value data from a DataFrame to Kafka using a topic specified in the data
df.selectExpr(“topic”, “CAST(key AS STRING)”, “CAST(value AS STRING)”)
  .write
  .format(“kafka”)
  .option(“kafka.bootstrap.servers”, “host1:port1,host2:port2”)
  .save()&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/spark/2017/09/22/spark-kafka.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/spark/2017/09/22/spark-kafka.html</guid>
        
        
        <category>spark</category>
        
      </item>
    
      <item>
        <title>mysqldump</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;mysqldump  -P端口  -hIP -u用户名 -p密码 表名 库名 &amp;gt; 目标文件.sql&lt;/p&gt;

&lt;p&gt;mysqldump: [Warning] Using a password on the command line interface can be insecure.&lt;/p&gt;

&lt;p&gt;mysqldump  -P端口  -hIP -u用户名 -p 表名 库名 &amp;gt; 目标文件.sql&lt;/p&gt;

&lt;p&gt;然后输入密码&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/web/2017/09/20/mysqldump.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/web/2017/09/20/mysqldump.html</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>mysql-time</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;MySQL 获得当前日期时间 函数
获得当前日期+时间（date + time）函数：now()&lt;/p&gt;

&lt;p&gt;复制代码
mysql&amp;gt; select now();&lt;/p&gt;

&lt;p&gt;+———————+
| now() |
+———————+
| 2008-08-08 22:20:46 |
+———————+
复制代码
获得当前日期+时间（date + time）函数：sysdate()
sysdate() 日期时间函数跟 now() 类似，不同之处在于：now() 在执行开始时值就得到了， sysdate() 在函数执行时动态得到值。看下面的例子就明白了：&lt;/p&gt;

&lt;p&gt;复制代码
mysql&amp;gt; select now(), sleep(3), now();&lt;/p&gt;

&lt;p&gt;+———————+———-+———————+
| now() | sleep(3) | now() |
+———————+———-+———————+
| 2008-08-08 22:28:21 | 0 | 2008-08-08 22:28:21 |
+———————+———-+———————+
复制代码
sysdate() 日期时间函数，一般情况下很少用到。&lt;/p&gt;

&lt;p&gt;MySQL 获得当前时间戳函数：current_timestamp, current_timestamp()&lt;/p&gt;

&lt;p&gt;复制代码
mysql&amp;gt; select current_timestamp, current_timestamp();&lt;/p&gt;

&lt;p&gt;+———————+———————+
| current_timestamp | current_timestamp() |
+———————+———————+
| 2008-08-09 23:22:24 | 2008-08-09 23:22:24 |
+———————+———————+
复制代码&lt;/p&gt;

&lt;p&gt;MySQL 日期转换函数、时间转换函数
MySQL Date/Time to Str（日期/时间转换为字符串）函数：date_format(date,format), time_format(time,format)&lt;/p&gt;

&lt;p&gt;复制代码
mysql&amp;gt; select date_format(‘2008-08-08 22:23:01’, ‘%Y%m%d%H%i%s’);&lt;/p&gt;

&lt;p&gt;+—————————————————-+
| date_format(‘2008-08-08 22:23:01’, ‘%Y%m%d%H%i%s’) |
+—————————————————-+
| 20080808222301 |
+—————————————————-+
复制代码
MySQL 日期、时间转换函数：date_format(date,format), time_format(time,format) 能够把一个日期/时间转换成各种各样的字符串格式。它是 str_to_date(str,format) 函数的 一个逆转换。&lt;/p&gt;

&lt;p&gt;MySQL Str to Date （字符串转换为日期）函数：str_to_date(str, format)&lt;/p&gt;

&lt;p&gt;select str_to_date(‘08/09/2008’, ‘%m/%d/%Y’); – 2008-08-09
select str_to_date(‘08/09/08’ , ‘%m/%d/%y’); – 2008-08-09
select str_to_date(‘08.09.2008’, ‘%m.%d.%Y’); – 2008-08-09
select str_to_date(‘08:09:30’, ‘%h:%i:%s’); – 08:09:30
select str_to_date(‘08.09.2008 08:09:30’, ‘%m.%d.%Y %h:%i:%s’); – 2008-08-09 08:09:30
可以看到，str_to_date(str,format) 转换函数，可以把一些杂乱无章的字符串转换为日期格式。另外，它也可以转换为时间。“format” 可以参看 MySQL 手册。&lt;/p&gt;

&lt;p&gt;MySQL （日期、天数）转换函数：to_days(date), from_days(days)&lt;/p&gt;

&lt;p&gt;select to_days(‘0000-00-00’); – 0
select to_days(‘2008-08-08’); – 733627&lt;/p&gt;

&lt;p&gt;MySQL （时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)&lt;/p&gt;

&lt;p&gt;select time_to_sec(‘01:00:05’); – 3605
select sec_to_time(3605); – ‘01:00:05’&lt;/p&gt;

&lt;p&gt;MySQL 拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)&lt;/p&gt;

&lt;p&gt;select makedate(2001,31); – ‘2001-01-31’
select makedate(2001,32); – ‘2001-02-01’
select maketime(12,15,30); – ‘12:15:30’&lt;/p&gt;

&lt;p&gt;MySQL （Unix 时间戳、日期）转换函数&lt;/p&gt;

&lt;p&gt;unix_timestamp(),
unix_timestamp(date),
from_unixtime(unix_timestamp),
from_unixtime(unix_timestamp,format)&lt;/p&gt;

&lt;p&gt;下面是示例：&lt;/p&gt;

&lt;p&gt;复制代码
select unix_timestamp(); – 1218290027
select unix_timestamp(‘2008-08-08’); – 1218124800
select unix_timestamp(‘2008-08-08 12:30:00’); – 1218169800&lt;/p&gt;

&lt;p&gt;select from_unixtime(1218290027); – ‘2008-08-09 21:53:47’
select from_unixtime(1218124800); – ‘2008-08-08 00:00:00’
select from_unixtime(1218169800); – ‘2008-08-08 12:30:00’&lt;/p&gt;

&lt;p&gt;select from_unixtime(1218169800, ‘%Y %D %M %h:%i:%s %x’); – ‘2008 8th August 12:30:00 2008’
复制代码&lt;/p&gt;

&lt;p&gt;MySQL 日期时间计算函数&lt;/p&gt;

&lt;p&gt;MySQL 为日期增加一个时间间隔：date_add()&lt;/p&gt;

&lt;p&gt;复制代码
set @dt = now();&lt;/p&gt;

&lt;p&gt;select date_add(@dt, interval 1 day); – add 1 day
select date_add(@dt, interval 1 hour); – add 1 hour
select date_add(@dt, interval 1 minute); – …
select date_add(@dt, interval 1 second);
select date_add(@dt, interval 1 microsecond);
select date_add(@dt, interval 1 week);
select date_add(@dt, interval 1 month);
select date_add(@dt, interval 1 quarter);
select date_add(@dt, interval 1 year);&lt;/p&gt;

&lt;p&gt;select date_add(@dt, interval -1 day); – sub 1 day
复制代码&lt;/p&gt;

&lt;p&gt;MySQL adddate(), addtime()函数，可以用 date_add() 来替代。下面是 date_add() 实现 addtime() 功能示例：&lt;/p&gt;

&lt;p&gt;复制代码
mysql&amp;gt; set @dt = ‘2008-08-09 12:12:33’;&lt;/p&gt;

&lt;p&gt;mysql&amp;gt;
mysql&amp;gt; select date_add(@dt, interval ‘01:15:30’ hour_second);&lt;/p&gt;

&lt;p&gt;+————————————————+
| date_add(@dt, interval ‘01:15:30’ hour_second) |
+————————————————+
| 2008-08-09 13:28:03 |
+————————————————+&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select date_add(@dt, interval ‘1 01:15:30’ day_second);&lt;/p&gt;

&lt;p&gt;+————————————————-+
| date_add(@dt, interval ‘1 01:15:30’ day_second) |
+————————————————-+
| 2008-08-10 13:28:03 |
+————————————————-+
复制代码&lt;/p&gt;

&lt;p&gt;MySQL 为日期减去一个时间间隔：date_sub()&lt;/p&gt;

&lt;p&gt;复制代码
mysql&amp;gt; select date_sub(‘1998-01-01 00:00:00’, interval ‘1 1:1:1’ day_second);&lt;/p&gt;

&lt;p&gt;+—————————————————————-+
| date_sub(‘1998-01-01 00:00:00’, interval ‘1 1:1:1’ day_second) |
+—————————————————————-+
| 1997-12-30 22:58:59 |
+—————————————————————-+
复制代码
MySQL date_sub() 日期时间函数 和 date_add() 用法一致，不再赘述。&lt;/p&gt;

&lt;p&gt;MySQL 日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)&lt;/p&gt;

&lt;p&gt;MySQL datediff(date1,date2)：两个日期相减 date1 - date2，返回天数。
select datediff(‘2008-08-08’, ‘2008-08-01’); – 7
select datediff(‘2008-08-01’, ‘2008-08-08’); – -7
MySQL timediff(time1,time2)：两个日期相减 time1 - time2，返回 time 差值。&lt;/p&gt;

&lt;p&gt;select timediff(‘2008-08-08 08:08:08’, ‘2008-08-08 00:00:00’); – 08:08:08
select timediff(‘08:08:08’, ‘00:00:00’); – 08:08:08
注意：timediff(time1,time2) 函数的两个参数类型必须相同。&lt;/p&gt;

&lt;p&gt;MySQL 时间戳（timestamp）转换、增、减函数：&lt;/p&gt;

&lt;p&gt;timestamp(date) – date to timestamp
timestamp(dt,time) – dt + time
timestampadd(unit,interval,datetime_expr) –
timestampdiff(unit,datetime_expr1,datetime_expr2) –
请看示例部分：&lt;/p&gt;

&lt;p&gt;复制代码
select timestamp(‘2008-08-08’); – 2008-08-08 00:00:00
select timestamp(‘2008-08-08 08:00:00’, ‘01:01:01’); – 2008-08-08 09:01:01
select timestamp(‘2008-08-08 08:00:00’, ‘10 01:01:01’); – 2008-08-18 09:01:01&lt;/p&gt;

&lt;p&gt;select timestampadd(day, 1, ‘2008-08-08 08:00:00’); – 2008-08-09 08:00:00
select date_add(‘2008-08-08 08:00:00’, interval 1 day); – 2008-08-09 08:00:00&lt;/p&gt;

&lt;p&gt;MySQL timestampadd() 函数类似于 date_add()。
select timestampdiff(year,’2002-05-01’,’2001-01-01’); – -1
select timestampdiff(day ,’2002-05-01’,’2001-01-01’); – -485
select timestampdiff(hour,’2008-08-08 12:00:00’,’2008-08-08 00:00:00’); – -12&lt;/p&gt;

&lt;p&gt;select datediff(‘2008-08-08 12:00:00’, ‘2008-08-01 00:00:00’); – 7
复制代码
MySQL timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。&lt;/p&gt;

&lt;p&gt;MySQL 时区（timezone）转换函数
convert_tz(dt,from_tz,to_tz)&lt;/p&gt;

&lt;p&gt;select convert_tz(‘2008-08-08 12:00:00’, ‘+08:00’, ‘+00:00’); – 2008-08-08 04:00:00
时区转换也可以通过 date_add, date_sub, timestampadd 来实现。&lt;/p&gt;

&lt;p&gt;select date_add(‘2008-08-08 12:00:00’, interval -8 hour); – 2008-08-08 04:00:00
select date_sub(‘2008-08-08 12:00:00’, interval 8 hour); – 2008-08-08 04:00:00
select timestampadd(hour, -8, ‘2008-08-08 12:00:00’); – 2008-08-08 04:00:00&lt;/p&gt;

</description>
        <pubDate>Wed, 20 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/09/20/mysql-time.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/09/20/mysql-time.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>mac 安装 sshfs</title>
        <description>
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$brew&lt;/span&gt; cask install osxfuse
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$brew&lt;/span&gt; install sshfs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- more --&gt;
&lt;p&gt;挂载(如果配上ssh key就可以完全自动化了):
sshfs root@192.168.9.109:/opt /opt/s109
卸载:
fusermount -u /opt/s109&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/09/18/sshfs.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/09/18/sshfs.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>jupyter</title>
        <description>&lt;p&gt;Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。
Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;官网：https://github.com/jupyter?language=python&lt;/p&gt;

&lt;p&gt;mac 安装：
pip install jupyter&lt;/p&gt;

&lt;p&gt;使用：
$jupyter notebook&lt;/p&gt;

&lt;p&gt;此时浏览器中会弹出notebook窗口（http://localhost:8888/tree）&lt;/p&gt;

&lt;p&gt;问题：
出现404&lt;/p&gt;

&lt;p&gt;修改配置文件端口&lt;/p&gt;

&lt;p&gt;$jupyter  notebook –generate-config –allow-root&lt;/p&gt;

&lt;p&gt;/Users/didi/.jupyter/jupyter_notebook_config.py&lt;/p&gt;

&lt;p&gt;$vi /Users/didi/.jupyter/jupyter_notebook_config.py&lt;/p&gt;

&lt;p&gt;把端口改为8866&lt;/p&gt;

&lt;p&gt;0 active kernels&lt;/p&gt;

&lt;p&gt;The Jupyter Notebook is running at: http://localhost:8866/?token=2d6&lt;/p&gt;

&lt;p&gt;成功
&lt;img src=&quot;https://xiazemin.github.io/MyBlog/img/jupyter.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Files下面列出了当前用户目录下所有的文件，结合右上角的upload和new你可以方便地进行文件操作。你先选择一个目录，在该目录下，new一个python2，这样当前目录即会出现一个“.ipynb”文件，同时，浏览器会弹新的标签页让你编辑该“.ipynb”文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xiazemin.github.io/MyBlog/img/jupyter_use.png&quot; alt=&quot;jupyter_use&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在该界面下，每输入一行代码Enter后不会运行当前代码，而是换行让你输入下一行代码，当你键入Shift + Enter后，将运行刚刚你输入的那几行代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xiazemin.github.io/MyBlog/img/jupyter_use1.png&quot; alt=&quot;jupyter_use&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还可以new一个Terminal，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xiazemin.github.io/MyBlog/img/jupyter_use2.png&quot; alt=&quot;jupyter_use&quot; /&gt;&lt;/p&gt;

&lt;p&gt;mac 截图：
下载snipmac&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/deep_learning/2017/09/17/jupyter.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/deep_learning/2017/09/17/jupyter.html</guid>
        
        
        <category>deep_learning</category>
        
      </item>
    
      <item>
        <title>deep_learning</title>
        <description>&lt;p&gt;学习资源：
http://study.163.com/course/courseMain.htm?courseId=1003284016&lt;/p&gt;

&lt;p&gt;http://study.163.com/my#/smarts&lt;/p&gt;

&lt;!-- more --&gt;
</description>
        <pubDate>Sun, 17 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/deep_learning/2017/09/17/deep_learning.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/deep_learning/2017/09/17/deep_learning.html</guid>
        
        
        <category>deep_learning</category>
        
      </item>
    
      <item>
        <title>spark-rdd</title>
        <description>&lt;!-- more --&gt;
&lt;p&gt;参考书籍
https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/index.html
每个 Spark 应用程序都由一个驱动程序(driver programe)构成，驱动程序在集群上运行用户的 main 函数来执行各种各样的并行操作(parallel operations)。Spark 的主要抽象是提供一个弹性分布式数据集(RDD resilient distributed dataset)，RDD 是指能横跨集群所有节点进行并行计算的分区元素集合。RDD 可以从 Hadoop 文件系统中的一个文件中创建而来(或其他 Hadoop 支持的文件系统)，或者从一个已有的 Scala 集合转换得到。用户可以要求 Spark 将 RDD 持久化(persist)到内存中，来让它在并行计算中高效地重用。最后，RDD 能从节点失败中自动地恢复过来。
Spark 的第二个抽象是共享变量(shared variables)，共享变量能被运行在并行计算中。默认情况下，当 Spark 运行一个并行函数时，这个并行函数会作为一个任务集在不同的节点上运行，它会把函数里使用的每个变量都复制搬运到每个任务中。有时，一个变量需要被共享到交叉任务中或驱动程序和任务之间。Spark 支持 2 种类型的共享变量：广播变量(broadcast variables)，用来在所有节点的内存中缓存一个值；累加器(accumulators)，仅仅只能执行“添加(added)”操作，例如：记数器(counters)和求和(sums)。&lt;/p&gt;

&lt;p&gt;Spark 核心的概念是 Resilient Distributed Dataset (RDD)：一个可并行操作的有容错机制的数据集合。有 2 种方式创建 RDDs：第一种是在你的驱动程序中并行化一个已经存在的集合；另外一种是引用一个外部存储系统的数据集，例如共享的文件系统，HDFS，HBase或其他 Hadoop 数据格式的数据源。&lt;/p&gt;

&lt;p&gt;RDDs 支持 2 种类型的操作：转换(transformations) 从已经存在的数据集中创建一个新的数据集；动作(actions) 在数据集上进行计算之后返回一个值到驱动程序。例如，map 是一个转换操作，它将每一个数据集元素传递给一个函数并且返回一个新的 RDD。另一方面，reduce 是一个动作，它使用相同的函数来聚合 RDD 的所有元素，并且将最终的结果返回到驱动程序(不过也有一个并行 reduceByKey 能返回一个分布式数据集)。
在 Spark 中，所有的转换(transformations)都是惰性(lazy)的，它们不会马上计算它们的结果。相反的，它们仅仅记录转换操作是应用到哪些基础数据集(例如一个文件)上的。转换仅仅在这个时候计算：当动作(action) 需要一个结果返回给驱动程序的时候。这个设计能够让 Spark 运行得更加高效。例如，我们可以实现：通过 map 创建一个新数据集在 reduce 中使用，并且仅仅返回 reduce 的结果给 driver，而不是整个大的映射过的数据集。
默认情况下，每一个转换过的 RDD 会在每次执行动作(action)的时候重新计算一次。然而，你也可以使用 persist (或 cache)方法持久化(persist)一个 RDD 到内存中。在这个情况下，Spark 会在集群上保存相关的元素，在你下次查询的时候会变得更快。在这里也同样支持持久化 RDD 到磁盘，或在多个节点间复制。&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/spark/2017/09/15/spark-rdd.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/spark/2017/09/15/spark-rdd.html</guid>
        
        <category>spark</category>
        
        
        <category>spark</category>
        
      </item>
    
  </channel>
</rss>
