<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0.pre.beta1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-06T09:54:30+08:00</updated><id>http://localhost:4000/</id><title type="html">泽民博客</title><subtitle>夏泽民的个人主页，学习笔记。</subtitle><entry><title type="html">Welcome to xiazemin’s blog!</title><link href="http://localhost:4000/jekyll/update/2017/09/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to xiazemin's blog!" /><published>2017-09-05T17:23:48+08:00</published><updated>2017-09-05T17:23:48+08:00</updated><id>http://localhost:4000/jekyll/update/2017/09/05/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/09/05/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Jekyll Usage</title><link href="http://localhost:4000/2017/09/05/jekyll-usage.html" rel="alternate" type="text/html" title="Jekyll Usage" /><published>2017-09-05T00:00:00+08:00</published><updated>2017-09-05T00:00:00+08:00</updated><id>http://localhost:4000/2017/09/05/jekyll-usage</id><content type="html" xml:base="http://localhost:4000/2017/09/05/jekyll-usage.html">&lt;p&gt;Jekyll中一篇文章就是一个文件，所有需要发布的文章都要放在_posts文件夹内。Jekyll对于文章的文件名也是有要求的，系统会根据文件名来生成每篇文章的链接地址。具体的格式为：YYYY-MM-DD-文章标题.markdown 其中YYYY为4位年份，MM是两位的月份，DD是两位的日期。&lt;/p&gt;

&lt;p&gt;在使用Markdown撰写文章之前我们需要先设置头信息。头信息需要根据YAML的格式写在两行三虚线之间。在头信息可以设置预定义的全局变量的值，Jekyll会根据变量的值来生成文章页面。&lt;/p&gt;

&lt;p&gt;layout使用指定的模版文件，不加扩展名。模版文件放在_layouts目录下。&lt;/p&gt;

&lt;p&gt;title文章的标题。&lt;/p&gt;

&lt;p&gt;date发布文章的时间。&lt;/p&gt;

&lt;p&gt;categories将文章设置成不同的属性。系统在生成页面时会根据多个属性值来生成文章地址。以上设置会生http://…/jekyll/update/…格式的文章链接。&lt;/p&gt;

&lt;p&gt;tags标签，一篇文章可以设置多个标签，使用空格分割。&lt;/p&gt;

&lt;p&gt;Jekyll是支持图片和其它资源文件的&lt;/p&gt;

&lt;p&gt;$ls
404.html	Gemfile.lock	_posts		about.md
Gemfile		_config.yml	_site		index.md&lt;/p&gt;

&lt;p&gt;Jekyll 使用 Liquid 模板语言，Jekyll Usage 表示文章标题， 表示文章内容&lt;/p&gt;

&lt;h1 id=&quot;1文件结构&quot;&gt;1.文件结构&lt;/h1&gt;
&lt;p&gt;_config.yml：用于保存配置。（jekyll会自动加载这些配置）&lt;/p&gt;

&lt;p&gt;_includes文件夹：存放可以重复利用的文件，可以被其他的文件包含（方法：{\% include 文件名 \%}）&lt;/p&gt;

&lt;p&gt;_layouts文件夹：存放模板文件（标签将content插入页面中）。&lt;/p&gt;

&lt;p&gt;_posts文件夹：存放实际的博客文章内容（文件名格式：年-月-日-标题.md）。&lt;/p&gt;

&lt;p&gt;_site文件夹：存放最终生成的文件（其他的目录都会被拷贝到最终文件的目录下。所以css,images等目录都可以放在根目录下）。&lt;/p&gt;

&lt;p&gt;YAML头信息（可选的）：（文章只要包含YAML头，yekyll就会将其转换成html文件）设置一些预定义的变量，或你自己定义的变量。&lt;/p&gt;

&lt;h1 id=&quot;2常用命令命令行输入&quot;&gt;2.常用命令（命令行输入）&lt;/h1&gt;

&lt;p&gt;$ jekyll build     ：当前文件夹中的内容将会生成到 ./site 文件夹中。&lt;/p&gt;

&lt;p&gt;$ jekyll build –destination &lt;destination&gt;   ：当前文件夹中的内容会生成到指定文件夹中。&lt;/destination&gt;&lt;/p&gt;

&lt;p&gt;$ jekyll build –source &lt;source /&gt;–destination &lt;destination&gt;  ：将指定源文件夹中的内容生成到指定文件夹中。&lt;/destination&gt;&lt;/p&gt;

&lt;p&gt;$ jekyll build –watch  ：查看更改，再生成。&lt;/p&gt;

&lt;p&gt;$ jekyll serve      ：启动服务器，使用本地预览，运行在http://localhost:4000/。（jekyll集成了一个服务器）&lt;/p&gt;

&lt;p&gt;$ jekyll serve –watch     ：先查看变更在启动服务器。&lt;/p&gt;

&lt;p&gt;可以在_config.yml文件中添加配置，jekyll会自动获取其中的配置，例如：&lt;/p&gt;

&lt;p&gt;source:_source&lt;/p&gt;

&lt;p&gt;destination:_deploy&lt;/p&gt;

&lt;p&gt;等同于命令：jekyll build –source _source –destination _deploy&lt;/p&gt;

&lt;h1 id=&quot;3jekyll原理&quot;&gt;3.jekyll原理&lt;/h1&gt;

&lt;p&gt;jekyll使用Liquid语言&lt;/p&gt;

&lt;p&gt;Liquid语言使用2种标记（Output和Tag）：Output：，Tag：{\% content \%}&lt;/p&gt;

&lt;p&gt;Liquid过滤器：将左边字符串通过过滤器得到想要的结果并输出。&lt;/p&gt;

&lt;p&gt;过滤器示例
Liquid的标准过滤器：&lt;/p&gt;

&lt;p&gt;date - 格式化日期&lt;/p&gt;

&lt;p&gt;capitalize - 将输入语句的首字母大写&lt;/p&gt;

&lt;p&gt;downcase - 将输入字符串转为小写&lt;/p&gt;

&lt;p&gt;upcase - 将输入字符串转为大写&lt;/p&gt;

&lt;p&gt;first - 得到传递数组的第一个元素&lt;/p&gt;

&lt;p&gt;last - 得到传递数组的最后一个元素&lt;/p&gt;

&lt;p&gt;join - 将数组中的元素连成一串，中间通过某些字符分隔&lt;/p&gt;

&lt;p&gt;sort - 对数组元素进行排序&lt;/p&gt;

&lt;p&gt;map - 从一个给定属性中映射/收集一个数组&lt;/p&gt;

&lt;p&gt;size - 返回一个数组或字符串的大小&lt;/p&gt;

&lt;p&gt;escape - 对一串字符串进行编码&lt;/p&gt;

&lt;p&gt;escape_once - 返回一个转义的html版本，而不影响现有的转义文本&lt;/p&gt;

&lt;p&gt;strip_html - 去除一串字符串中的所有html标签&lt;/p&gt;

&lt;p&gt;strip_newlines - 从字符串中去除所有换行符(\n)&lt;/p&gt;

&lt;p&gt;newline_to_br - 将所有的换行符(\n)换成 html 的换行标记&lt;/p&gt;

&lt;p&gt;replace - 匹配每一处指定字符串并替换，如 barbar #=&amp;gt; ‘barbar’&lt;/p&gt;

&lt;p&gt;replace_first - 匹配第一处指定的字符串并替换，如 foobar #=&amp;gt; ‘foobar’&lt;/p&gt;

&lt;p&gt;remove - 删除每一处匹配字符串，如 barbar #=&amp;gt; ‘barbar’&lt;/p&gt;

&lt;p&gt;remove_first - 删除第一处匹配的字符串，如 bar #=&amp;gt; ‘bar’&lt;/p&gt;

&lt;p&gt;truncate - 将一串字符串截断为x个字符&lt;/p&gt;

&lt;p&gt;truncatewords - 将一串字符串截断为x个单词&lt;/p&gt;

&lt;p&gt;prepend - 在一串字符串前面加上指定字符串，如 foobar #=&amp;gt; ‘foobar’&lt;/p&gt;

&lt;p&gt;append - 在一串字符串后面加上指定字符串，如 foobar #=&amp;gt; ‘foobar’&lt;/p&gt;

&lt;p&gt;minus - 减，如 2 #=&amp;gt; 2&lt;/p&gt;

&lt;p&gt;plus - 加，如 2 #=&amp;gt; ‘11’, 2 #=&amp;gt; 2&lt;/p&gt;

&lt;p&gt;times - 乘，如 20 #=&amp;gt; 20&lt;/p&gt;

&lt;p&gt;divided_by - 除，如 5 #=&amp;gt; 5&lt;/p&gt;

&lt;p&gt;split - 将一串字符串根据匹配模式分割成数组，如 a~b #=&amp;gt; [‘a’,’b’]&lt;/p&gt;

&lt;p&gt;modulo - 余数，如 1 #=&amp;gt; 1
tag标签：&lt;/p&gt;

&lt;p&gt;assign- 创建一个变量&lt;/p&gt;

&lt;p&gt;capture- 块标记，把一些文本捕捉到一个变量中（如：把一系列字符串连接为一个字符串，并将其存储到变量中）&lt;/p&gt;

&lt;p&gt;case- 块标记，标准的 case 语句&lt;/p&gt;

&lt;p&gt;comment- 块标记，将一块文本作为注释&lt;/p&gt;

&lt;p&gt;if- 标准的 if/else 块&lt;/p&gt;

&lt;p&gt;unless- if 语句的简版&lt;/p&gt;

&lt;p&gt;include- 包含其他的模板&lt;/p&gt;

&lt;p&gt;raw- 暂时性的禁用的标签的解析（展示一些可能产生冲突的内容）&lt;/p&gt;

&lt;p&gt;cycle- 用于循环轮换值，如颜色或 DOM 类&lt;/p&gt;

&lt;p&gt;for- 用于循环 For loop（for 。。。 in 。。。  limit:int使你可以限制接受的循环项个数；offset:int可以可以让你从循环集合的第 n 项开始；reversed让你可以翻转循环）
jekyll新增的过滤器：&lt;/p&gt;

&lt;p&gt;date_to_string - 日期转化为短格式&lt;/p&gt;

&lt;p&gt;date_to_long_string - 日期转化为长格式&lt;/p&gt;

&lt;p&gt;number_of_words - 统计字数（403）&lt;/p&gt;

&lt;p&gt;array_to_sentence_string - 数组转换为句子（列举标签时：）&lt;/p&gt;

&lt;p&gt;markdownify - 将makedown格式字符串转换成HTML&lt;/p&gt;

&lt;p&gt;jsonify - data to JSON
jekyll新增标签：&lt;/p&gt;

&lt;p&gt;highlight 语言 linenos（行号，可选）- 块标签，代码高亮&lt;/p&gt;

&lt;p&gt;post_url - 使用某篇博文的超链接（不需要写文件后缀）&lt;/p&gt;

&lt;p&gt;gist - github gist显示代码（gist的介绍和使用 ）（{\% gist 5555251 \%}）&lt;/p&gt;

&lt;h1 id=&quot;4书写博客&quot;&gt;4.书写博客&lt;/h1&gt;
&lt;p&gt;引用图片或其他资源：新建一个文件夹存放，在博文中的引用方式：http://localhost:4000表示站点的根目录
&lt;code class=&quot;highlighter-rouge&quot;&gt;![实例图片](http://localhost:4000／assets/image.jpeg)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其他的资源引用也是一样的。&lt;/p&gt;

&lt;h1 id=&quot;5创建博文目录&quot;&gt;5.创建博文目录&lt;/h1&gt;

&lt;p&gt;一个简单的例子，使用的是Liquid模板语言。&lt;/p&gt;
&lt;ul&gt;
{\% for post in site.posts \%}
&lt;li&gt;
&lt;a href=&quot;&quot;&gt; &lt;/a&gt;
&lt;/li&gt;
{\% endfor \%}
&lt;/ul&gt;

&lt;p&gt;创建目录&lt;/p&gt;

&lt;h1 id=&quot;6分页&quot;&gt;6、分页&lt;/h1&gt;

&lt;p&gt;在_config.yml里边加一行，并填写每页需要几行：&lt;/p&gt;

&lt;p&gt;paginate:5&lt;/p&gt;

&lt;p&gt;对需要带有分页页面的配置： paginate_path:”blog/page:num”
blog/index.html将会读取这个设置，把他传给每个分页页面，然后从第2页开始输出到blog/page:num，:num是页码。如果有 12 篇文章并且做如下配置paginate: 5， Jekyll会将前 5 篇文章写入blog/index.html，把接下来的 5 篇文章写入blog/page2/index.html，最后 2 篇写入blog/page3/index.html。&lt;/p&gt;

&lt;h1 id=&quot;7草稿&quot;&gt;7、草稿&lt;/h1&gt;

&lt;p&gt;草稿是你还在创作中不想发表的文章。&lt;/p&gt;

&lt;p&gt;创建一个名为_drafts的文件夹&lt;/p&gt;</content><author><name></name></author><summary type="html">Jekyll中一篇文章就是一个文件，所有需要发布的文章都要放在_posts文件夹内。Jekyll对于文章的文件名也是有要求的，系统会根据文件名来生成每篇文章的链接地址。具体的格式为：YYYY-MM-DD-文章标题.markdown 其中YYYY为4位年份，MM是两位的月份，DD是两位的日期。</summary></entry><entry><title type="html">Jekyll Page</title><link href="http://localhost:4000/2017/09/05/jekyll-page.html" rel="alternate" type="text/html" title="Jekyll Page" /><published>2017-09-05T00:00:00+08:00</published><updated>2017-09-05T00:00:00+08:00</updated><id>http://localhost:4000/2017/09/05/jekyll-page</id><content type="html" xml:base="http://localhost:4000/2017/09/05/jekyll-page.html">&lt;p&gt;分页：&lt;/p&gt;

&lt;p&gt;vi  _config.yml&lt;/p&gt;

&lt;p&gt;添加
paginate:5
paginatepath: [‘topics/study/page/:num’,’topics/life/page/:num’]&lt;/p&gt;

&lt;p&gt;问题：
Deprecation: You appear to have pagination turned on, but you haven’t included the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; gem. Ensure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [jekyll-paginate]&lt;/code&gt; in your configuration file.&lt;/p&gt;

&lt;p&gt;解决方案：
1，gem install jekyll-paginate&lt;/p&gt;

&lt;p&gt;2，$gem list |grep jekyll-paginate
jekyll-paginate (1.1.0)&lt;/p&gt;

&lt;p&gt;3，$vi Gemfile
gem “jekyll-paginate”,”~&amp;gt; 1.1.0”&lt;/p&gt;

&lt;p&gt;4，$vi _config.yml
plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-feed&lt;/li&gt;
  &lt;li&gt;jekyll-paginate
paginate: 1
paginate_path: “page:num”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5，$ bundle install
$ bundle exec jekyll serve&lt;/p&gt;</content><author><name></name></author><summary type="html">分页：</summary></entry><entry><title type="html">Jekyll Mac Install</title><link href="http://localhost:4000/2017/09/05/jekyll-mac-install.html" rel="alternate" type="text/html" title="Jekyll Mac Install" /><published>2017-09-05T00:00:00+08:00</published><updated>2017-09-05T00:00:00+08:00</updated><id>http://localhost:4000/2017/09/05/jekyll-mac-install</id><content type="html" xml:base="http://localhost:4000/2017/09/05/jekyll-mac-install.html">&lt;h1 id=&quot;升级mac自带的rubby&quot;&gt;升级mac自带的rubby&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$ curl -L get.rvm.io&lt;/td&gt;
      &lt;td&gt;bash -s stable&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;$ rvm -v&lt;/p&gt;

&lt;p&gt;$ rvm list known&lt;/p&gt;

&lt;p&gt;$ rvm install 2.4.0&lt;/p&gt;

&lt;h1 id=&quot;安装jekyll&quot;&gt;安装jekyll&lt;/h1&gt;

&lt;p&gt;$ git clone git://github.com/jekyll/jekyll.git&lt;/p&gt;

&lt;p&gt;$ cd jekyll&lt;/p&gt;

&lt;p&gt;$ script/bootstrap&lt;/p&gt;

&lt;p&gt;$ bundle exec rake build&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$ ls pkg/*.gem&lt;/td&gt;
      &lt;td&gt;head -n 1&lt;/td&gt;
      &lt;td&gt;xargs gem install -l&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参考：https://jekyllrb.com/docs/installation/&lt;/p&gt;

&lt;h1 id=&quot;创建jekyll工程开始使用&quot;&gt;创建jekyll工程，开始使用&lt;/h1&gt;

&lt;p&gt;$ jekyll new blog&lt;/p&gt;

&lt;p&gt;$cd blog&lt;/p&gt;

&lt;p&gt;$jekyll serve&lt;/p&gt;

&lt;h1 id=&quot;修改默认配置&quot;&gt;修改默认配置&lt;/h1&gt;

&lt;p&gt;$vi _config.yml&lt;/p&gt;

&lt;h1 id=&quot;mac--markdown-编辑器&quot;&gt;mac  markdown 编辑器&lt;/h1&gt;

&lt;p&gt;http://macdown.uranusjr.com/&lt;/p&gt;</content><author><name></name></author><summary type="html">升级mac自带的rubby $ curl -L get.rvm.io bash -s stable $ rvm -v $ rvm list known $ rvm install 2.4.0 安装jekyll $ git clone git://github.com/jekyll/jekyll.git $ cd jekyll $ script/bootstrap $ bundle exec rake build $ ls pkg/*.gem head -n 1 xargs gem install -l 参考：https://jekyllrb.com/docs/installation/ 创建jekyll工程，开始使用</summary></entry></feed>