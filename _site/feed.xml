<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泽民博客</title>
    <description>夏泽民的个人主页，学习笔记。</description>
    <link>https://xiazemin.github.io/MyBlog/</link>
    <atom:link href="https://xiazemin.github.io/MyBlog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 07 Sep 2017 21:10:55 +0800</pubDate>
    <lastBuildDate>Thu, 07 Sep 2017 21:10:55 +0800</lastBuildDate>
    <generator>Jekyll v3.6.0.pre.beta1</generator>
    
      <item>
        <title>markdown</title>
        <description>&lt;p&gt;自定义markdown头自动化脚本
$!/bin/bash
if read -t 20 -p “please input your blog name:”
then
  echo “hello $REPLY, welcome to come back here”
  prefix=&lt;code class=&quot;highlighter-rouge&quot;&gt;date '+%Y-%m-%d'&lt;/code&gt;
  name=’_posts/’$prefix’-‘$REPLY’.markdown’
  echo $name’ opened’
  path=&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;’/’
  file=$path$name
if [ -f “$file” ]
then
  echo “open existed file”
else
  template=$path’head.markdown’
  sed -E “s/title:.*/title: $REPLY/” $template  &amp;gt; $file
fi
 /Applications/MacDown.app/Contents/MacOS/MacDown  $file&lt;/p&gt;

&lt;p&gt;else
  echo “sorry , you are too slow “
fi&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/markdown/2017/09/07/markdown.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/markdown/2017/09/07/markdown.html</guid>
        
        
        <category>markdown</category>
        
      </item>
    
      <item>
        <title>mac-sed</title>
        <description>&lt;p&gt;mac sed 和linux sed 不一致&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;mac：
sed －E&lt;/p&gt;

&lt;p&gt;linux： 
sed －r&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/09/07/mac-sed.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/09/07/mac-sed.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>jekyll config</title>
        <description>&lt;p&gt;export GEM_HOME=”/Users/didi/.rvm/gems/ruby-2.4.0”
export PATH=”/Users/didi/blog/jekyll:$PATH”
export PATH=”/Users/didi/.rvm/gems/ruby-2.4.0/bin:/Users/didi/.rvm/gems/ruby-2.4.0@global/bin:/Users/didi/.rvm/rubies/ruby-2.4.0/bin:/Users/didi/.rvm/bin:$PATH”&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/09/07/jeky-env.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/09/07/jeky-env.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>comment</title>
        <description>&lt;p&gt;在Jekyll博客添加评论系统：gitment篇&lt;/p&gt;

&lt;p&gt;在Jekyll博客添加评论系统：gitment篇
最近在Github Pages上使用Jekyll搭建了个人博客( jacobpan3g.github.io/cn ),当需要添加评论系统时，找了一下国内的几个第三方评论系统，如“多说”，“畅言”，“友言”，“新浪云跟贴”：&lt;/p&gt;

&lt;p&gt;多说，曾经较火的评论系统，网上介绍文章比较多，但已关闭，无法再用了
畅言，sohu旗下的，但是需要个人博客备案后才能使用，但github pages个人博客感觉备案比较难
友言，jiaThis旗下的，由于时http请求，github pages现在都是https了， 在https站点无法调用http请求，故也无法使用
网易云跟贴，曾被当作“多说”的替代品，可惜官方通报说也将在2017.08.01关闭了
再看看disqus，国外比较火的评论系统，但在国内墙了，故也不考虑。&lt;/p&gt;

&lt;p&gt;综上，国内几个比较主流的评论系统目前都无法在Github Pages上的个人博客使用， 后面我发现了gitment，一款由国内大神imsun开发的基于github issues的评论系统, 具体介绍请看项目主页( github.com/imsun/gitment )。&lt;/p&gt;

&lt;p&gt;目前我已经成功把gitment应用到了自己的Github pages个人博客里，过程中碰了一些壁, 同时发现网上关于gitment的介绍并不多，故写一篇总结，希望可以帮助到大家。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;申请一个Github OAuth Application
Github头像下拉菜单 &amp;gt; Settings &amp;gt; 左边Developer settings下的OAuth Application &amp;gt; Register a new application，填写相关信息：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Application name, Homepage URL, Application description 都可以随意填写
Authorization callback URL 一定要写自己Github Pages的URL
(ps: 之前我自己就是在这里碰壁了，调试半天才发现)
填写完上述信息后按Register application按钮，得到Client ID和Client Secret&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在jekyll博客调用gitment
如gitment项目页Readme所示，在你需要添加评论系统的地方，一般是_layout/目录下的 post.html, 添加一下代码
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=&quot;gitmentContainer&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&amp;gt;
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var gitment = new Gitment({
 owner: 'Your GitHub username',
 repo: 'The repo to store comments',
 oauth: {
     client_id: 'Your client ID',
     client_secret: 'Your client secret',
 },
});
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitment.render('gitmentContainer');&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要修改的有4个地方&lt;/p&gt;

&lt;p&gt;Your GitHub username：填写你的Github Pages博客所在的github账户名
The repo to store comments：填写用来存放评论的github仓库，由于评论是 通过issues来存放的，个人建议这里可以直接填Github Pages个人博客所在的仓库
Your client ID：第1步所申请到的应用的Client ID
Your client secret：第1步所申请到的应用的Client Secret
填写完这4项把代码保存上传到github就可以了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;为每篇博文初始化评论系统
由于gitment的原理是为每一遍博文以其URL作为标识创建一个github issue， 对该篇博客的评论就是对这个issue的评论。因此，我们需要为每篇博文初始化一下评论系统， 初始化后，你可以在你的github上会创建相对应的issue。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来，介绍一下如何初始化评论系统&lt;/p&gt;

&lt;p&gt;上面第2步代码添加成功并上传后，你就可以在你的博文页下面看到一个评论框，还 有看到以下错误Error: Comments Not Initialized，提示该篇博文的评论系统还没初始化&lt;/p&gt;

&lt;p&gt;点击Login with GitHub后，使用自己的github账号登录后，就可以在上面错误信息 处看到一个Initialize Comments的按钮
(ps: 由于要求回调URL和当前地址一样，故第2步不能在本地调试， 需把代码先上传再调试)&lt;/p&gt;

&lt;p&gt;点击Initialize Comments按钮后，就可以开始对该篇博文开始评论了， 同时也可以在对应的github仓库看到相应的issue
&lt;img src=&quot;/MyBlog/img/comment.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一些问题
安全问题
有些读者担心github oauth application的client secret这样明文写在页面上会不会有安全 隐患，我也考虑到这个问题，目前我能想到比较好的解决方法是：注册一个github小号， 在小号里注册oauth application，使用小号app的client secret&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;回调URL
有些读者反映登录不成功，请大家一定要确认github oauth application里的回调URL一定要 填写要使用gitment的博客的URL，这一点十分重要&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/09/07/comment.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/09/07/comment.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Welcome to xiazemin's blog!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Sep 2017 17:23:48 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/update/2017/09/05/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/update/2017/09/05/welcome-to-jekyll.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>nginx lua</title>
        <description>&lt;ul&gt;
  &lt;li&gt;为什么会选择 OpenResty
首先，它最大的特点就是用同步的代码逻辑实现非阻塞的调用，其次它有单进程内的 LRU cache 和进程间的 share DICT cache，而且它是揉合 nginx 和 LuaJIT 而产生的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;非阻塞的访问网络IO。在连接 MySQL 、Redis 和发起 HTTP 请求时，工作进程不能傻傻的等待网络IO的返回，而是需要支持事件驱动，用协程的方式让 CPU 资源更有效的去处理其他请求。很多语言并不具备这样的能力和周边库。&lt;/p&gt;

&lt;p&gt;有完备的缓存机制。不仅需要支持 Redis 、Memcached 等外部缓存，也应该在自己的进程内有缓存系统。我们希望大部分的请求都能在一个进程中得到数据并返回，这样是最高效的方法，一旦有了网络IO和进程间的交互，性能就会受到很大影响。&lt;/p&gt;

&lt;p&gt;同步的写代码逻辑，不要让开发者感知到回调和异步。这个也很重要，程序员也是人，代码应该更符合人的思维习惯，显式的回调和异步关键字，会打断思路，也给调试带来困难。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nginScript 这样的尝试会替代 OpenResty 吗？
nginScript 是今年 nginx 大会上，Nginx 官方推出的一个新的配置语言。它是模仿了 OpenResty 的做法，把 JavaScript VM 嵌入到 nginx 中，提供简单的 nginx 配置功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们看下它的 hello world：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;locationi / {
    js_run &quot;
        var res;
        res = $r.response;
        res.status = 200;
        res.send(&quot;hello world!&quot;);
        res.finish();
    &quot;
} 再对比下 OpenResty 的 hello world：

location / {
    content_by_lua_block {
        ngx.say(&quot;hello world&quot;)
    }
} 看上去差不多，只是 OpenResty 简洁一些。根据 nginx 官方的说明，nginScript 只是想提供一种更方便配置 nginx 的方法，并不想取代 ngx_lua。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/web/2017/08/05/nginx-lua.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/web/2017/08/05/nginx-lua.html</guid>
        
        <category>octopress</category>
        
        <category>jekyll</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>jekyll layout</title>
        <description>&lt;p&gt;layout: default&lt;/p&gt;

&lt;p&gt;作用是通过 layout 告诉Jekyll生成 index.html 时，要在_layouts 目录下找 default.html 文件，然后把当前文件解析后添加到 default.html 的content 的部分，组成最终的 index.html 文件。&lt;/p&gt;

&lt;p&gt;在我们写的markdown文档中也要设置YAML头信息，如我的这篇博文的头信息：&lt;/p&gt;

&lt;p&gt;layout: post 
title: “Jekyll和Github搭建个人静态博客” 
date: 2016/6/26 13:03:42&lt;/p&gt;

&lt;p&gt;categories: original&lt;/p&gt;

&lt;p&gt;layout表示使用post布局，title 是文章标题，date是自动生成的日期，categories 是该文章生成html文件后的存放目录，也就是文章的分类属性。可以在_site/original下找到。（category 只能添加一个分类属性， categories 可以添加多个分类属性。各属性使用空格隔开）&lt;/p&gt;

&lt;p&gt;因为文章套用的是post模板，所以title会传入 post.html 文件中的Jekyll和Github搭建个人静态博客中，成为最终 index.html 页面中的文章列表标题：&lt;/p&gt;

&lt;p&gt;author&lt;/p&gt;

&lt;p&gt;而 post.html 又套用了default.html 模板，而default页面中的头部又由 head.html 构成：&lt;/p&gt;

&lt;p&gt;head页面中的title属性：&lt;/p&gt;

&lt;p&gt;Jekyll和Github搭建个人静态博客 
就可以读取到这篇博文中的title并且设置在最终 index.html 文件中。&lt;/p&gt;

&lt;p&gt;_posts&lt;/p&gt;

&lt;p&gt;这个目录存放的就是我们所有的博文了。文件名字格式很重要，必须使用统一的格式：&lt;/p&gt;

&lt;p&gt;YEAR-MONTH-DAY-title.MARKUP 
例如，2016-06-26-MakeBlog.md，写成这样文件名才会被解析。&lt;/p&gt;

</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-layout.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-layout.html</guid>
        
        <category>octopress</category>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>jekyll dir</title>
        <description>&lt;p&gt;Jekyll 的核心是一个文本转换引擎。它的核心是把你零散的文件、文本组合起来，形成一个个网页，最终呈现在浏览器上展现出来。&lt;/p&gt;

&lt;p&gt;一个最基础的 Jekyll 博客，会拥有下面的目录结构：&lt;/p&gt;

&lt;p&gt;.
├── _config.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
│   └── 2013-08-07-welcome-to-jekyll.markdown
├── _site
└── index.html
这些目录的介绍如下：&lt;/p&gt;

&lt;p&gt;文件/目录	描述
_config.yml	存储配置数据。很多全局的配置或者指令写在这里。
_drafts	存放为发表的文章。这些是没有日期的文件。
_includes	存放一些组件。可以通过{\% include file.ext \%} 来引用。
_layouts	布局。
_posts	存放写文章，格式化为：YEAR-MONTH-DAY-title.md。
_site	最终生成的博客文件就在这里。
index.html	博客的主页。
other	例如静态文件 CSS，Images 和其他。
只要我们把自己需要的文件放到博客目录下，通过jekyll build，该目录就会被复制到_site里面。&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-dir.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-dir.html</guid>
        
        <category>octopress</category>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>jekyll macdown使用</title>
        <description>&lt;p&gt;Jekyll中一篇文章就是一个文件，所有需要发布的文章都要放在_posts文件夹内。Jekyll对于文章的文件名也是有要求的，系统会根据文件名来生成每篇文章的链接地址。具体的格式为：YYYY-MM-DD-文章标题.markdown 其中YYYY为4位年份，MM是两位的月份，DD是两位的日期。&lt;/p&gt;

&lt;p&gt;在使用Markdown撰写文章之前我们需要先设置头信息。头信息需要根据YAML的格式写在两行三虚线之间。在头信息可以设置预定义的全局变量的值，Jekyll会根据变量的值来生成文章页面。&lt;/p&gt;

&lt;p&gt;layout使用指定的模版文件，不加扩展名。模版文件放在_layouts目录下。&lt;/p&gt;

&lt;p&gt;title文章的标题。&lt;/p&gt;

&lt;p&gt;date发布文章的时间。&lt;/p&gt;

&lt;p&gt;categories将文章设置成不同的属性。系统在生成页面时会根据多个属性值来生成文章地址。以上设置会生http://…/jekyll/update/…格式的文章链接。&lt;/p&gt;

&lt;p&gt;tags标签，一篇文章可以设置多个标签，使用空格分割。&lt;/p&gt;

&lt;p&gt;Jekyll是支持图片和其它资源文件的&lt;/p&gt;

&lt;p&gt;$ls
404.html	Gemfile.lock	_posts		about.md
Gemfile		_config.yml	_site		index.md&lt;/p&gt;

&lt;p&gt;Jekyll 使用 Liquid 模板语言，jekyll macdown使用 表示文章标题，&amp;lt;p&amp;gt;分页：&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;p&gt;vi  _config.yml&lt;/p&gt;

&lt;p&gt;添加
paginate:5
paginatepath: [‘topics/study/page/:num’,’topics/life/page/:num’]&lt;/p&gt;

&lt;p&gt;问题：
Deprecation: You appear to have pagination turned on, but you haven’t included the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; gem. Ensure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [jekyll-paginate]&lt;/code&gt; in your configuration file.&lt;/p&gt;

&lt;p&gt;解决方案：
1，gem install jekyll-paginate&lt;/p&gt;

&lt;p&gt;2，$gem list |grep jekyll-paginate
jekyll-paginate (1.1.0)&lt;/p&gt;

&lt;p&gt;3，$vi Gemfile
gem “jekyll-paginate”,”~&amp;gt; 1.1.0”&lt;/p&gt;

&lt;p&gt;4，$vi _config.yml
plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-feed&lt;/li&gt;
  &lt;li&gt;jekyll-paginate
paginate: 1
paginate_path: “page:num”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5，$ bundle install
$ bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;问题上传github 访问404&lt;/p&gt;

&lt;p&gt;$vi _config.yml&lt;/p&gt;

&lt;p&gt;baseurl: “/MyBlog” # the subpath of your site, e.g. /blog&lt;/p&gt;

&lt;p&gt;url: “https://xiazemin.github.io” # the base hostname &amp;amp; protocol for your site, e.g. http://ex&lt;/p&gt;

&lt;p&gt;问题
 Pagination: Pagination is enabled, but I couldn’t find an index.html page to use as the pagination template. Skipping pagination.&lt;/p&gt;

&lt;p&gt;$vi index.html&lt;/p&gt;

&lt;p&gt;表示文章内容&lt;/p&gt;

&lt;h1 id=&quot;1文件结构&quot;&gt;1.文件结构&lt;/h1&gt;
&lt;p&gt;_config.yml：用于保存配置。（jekyll会自动加载这些配置）&lt;/p&gt;

&lt;p&gt;_includes文件夹：存放可以重复利用的文件，可以被其他的文件包含（方法：{\% include 文件名 \%}）&lt;/p&gt;

&lt;p&gt;_layouts文件夹：存放模板文件（标签&amp;lt;p&amp;gt;分页：&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;p&gt;vi  _config.yml&lt;/p&gt;

&lt;p&gt;添加
paginate:5
paginatepath: [‘topics/study/page/:num’,’topics/life/page/:num’]&lt;/p&gt;

&lt;p&gt;问题：
Deprecation: You appear to have pagination turned on, but you haven’t included the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; gem. Ensure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [jekyll-paginate]&lt;/code&gt; in your configuration file.&lt;/p&gt;

&lt;p&gt;解决方案：
1，gem install jekyll-paginate&lt;/p&gt;

&lt;p&gt;2，$gem list |grep jekyll-paginate
jekyll-paginate (1.1.0)&lt;/p&gt;

&lt;p&gt;3，$vi Gemfile
gem “jekyll-paginate”,”~&amp;gt; 1.1.0”&lt;/p&gt;

&lt;p&gt;4，$vi _config.yml
plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-feed&lt;/li&gt;
  &lt;li&gt;jekyll-paginate
paginate: 1
paginate_path: “page:num”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5，$ bundle install
$ bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;问题上传github 访问404&lt;/p&gt;

&lt;p&gt;$vi _config.yml&lt;/p&gt;

&lt;p&gt;baseurl: “/MyBlog” # the subpath of your site, e.g. /blog&lt;/p&gt;

&lt;p&gt;url: “https://xiazemin.github.io” # the base hostname &amp;amp; protocol for your site, e.g. http://ex&lt;/p&gt;

&lt;p&gt;问题
 Pagination: Pagination is enabled, but I couldn’t find an index.html page to use as the pagination template. Skipping pagination.&lt;/p&gt;

&lt;p&gt;$vi index.html&lt;/p&gt;

&lt;p&gt;将content插入页面中）。&lt;/p&gt;

&lt;p&gt;_posts文件夹：存放实际的博客文章内容（文件名格式：年-月-日-标题.md）。&lt;/p&gt;

&lt;p&gt;_site文件夹：存放最终生成的文件（其他的目录都会被拷贝到最终文件的目录下。所以css,images等目录都可以放在根目录下）。&lt;/p&gt;

&lt;p&gt;YAML头信息（可选的）：（文章只要包含YAML头，yekyll就会将其转换成html文件）设置一些预定义的变量，或你自己定义的变量。&lt;/p&gt;

&lt;h1 id=&quot;2常用命令命令行输入&quot;&gt;2.常用命令（命令行输入）&lt;/h1&gt;

&lt;p&gt;$ jekyll build     ：当前文件夹中的内容将会生成到 ./site 文件夹中。&lt;/p&gt;

&lt;p&gt;$ jekyll build –destination &lt;destination&gt;   ：当前文件夹中的内容会生成到指定文件夹中。&lt;/destination&gt;&lt;/p&gt;

&lt;p&gt;$ jekyll build –source &lt;source /&gt;–destination &lt;destination&gt;  ：将指定源文件夹中的内容生成到指定文件夹中。&lt;/destination&gt;&lt;/p&gt;

&lt;p&gt;$ jekyll build –watch  ：查看更改，再生成。&lt;/p&gt;

&lt;p&gt;$ jekyll serve      ：启动服务器，使用本地预览，运行在http://localhost:4000/。（jekyll集成了一个服务器）&lt;/p&gt;

&lt;p&gt;$ jekyll serve –watch     ：先查看变更在启动服务器。&lt;/p&gt;

&lt;p&gt;可以在_config.yml文件中添加配置，jekyll会自动获取其中的配置，例如：&lt;/p&gt;

&lt;p&gt;source:_source&lt;/p&gt;

&lt;p&gt;destination:_deploy&lt;/p&gt;

&lt;p&gt;等同于命令：jekyll build –source _source –destination _deploy&lt;/p&gt;

&lt;h1 id=&quot;3jekyll原理&quot;&gt;3.jekyll原理&lt;/h1&gt;

&lt;p&gt;jekyll使用Liquid语言&lt;/p&gt;

&lt;p&gt;Liquid语言使用2种标记（Output和Tag）：Output：&amp;lt;p&amp;gt;分页：&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;p&gt;vi  _config.yml&lt;/p&gt;

&lt;p&gt;添加
paginate:5
paginatepath: [‘topics/study/page/:num’,’topics/life/page/:num’]&lt;/p&gt;

&lt;p&gt;问题：
Deprecation: You appear to have pagination turned on, but you haven’t included the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; gem. Ensure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [jekyll-paginate]&lt;/code&gt; in your configuration file.&lt;/p&gt;

&lt;p&gt;解决方案：
1，gem install jekyll-paginate&lt;/p&gt;

&lt;p&gt;2，$gem list |grep jekyll-paginate
jekyll-paginate (1.1.0)&lt;/p&gt;

&lt;p&gt;3，$vi Gemfile
gem “jekyll-paginate”,”~&amp;gt; 1.1.0”&lt;/p&gt;

&lt;p&gt;4，$vi _config.yml
plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-feed&lt;/li&gt;
  &lt;li&gt;jekyll-paginate
paginate: 1
paginate_path: “page:num”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5，$ bundle install
$ bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;问题上传github 访问404&lt;/p&gt;

&lt;p&gt;$vi _config.yml&lt;/p&gt;

&lt;p&gt;baseurl: “/MyBlog” # the subpath of your site, e.g. /blog&lt;/p&gt;

&lt;p&gt;url: “https://xiazemin.github.io” # the base hostname &amp;amp; protocol for your site, e.g. http://ex&lt;/p&gt;

&lt;p&gt;问题
 Pagination: Pagination is enabled, but I couldn’t find an index.html page to use as the pagination template. Skipping pagination.&lt;/p&gt;

&lt;p&gt;$vi index.html&lt;/p&gt;

&lt;p&gt;，Tag：{\% content \%}&lt;/p&gt;

&lt;p&gt;Liquid过滤器：将左边字符串通过过滤器得到想要的结果并输出。&lt;/p&gt;

&lt;p&gt;过滤器示例
Liquid的标准过滤器：&lt;/p&gt;

&lt;p&gt;date - 格式化日期&lt;/p&gt;

&lt;p&gt;capitalize - 将输入语句的首字母大写&lt;/p&gt;

&lt;p&gt;downcase - 将输入字符串转为小写&lt;/p&gt;

&lt;p&gt;upcase - 将输入字符串转为大写&lt;/p&gt;

&lt;p&gt;first - 得到传递数组的第一个元素&lt;/p&gt;

&lt;p&gt;last - 得到传递数组的最后一个元素&lt;/p&gt;

&lt;p&gt;join - 将数组中的元素连成一串，中间通过某些字符分隔&lt;/p&gt;

&lt;p&gt;sort - 对数组元素进行排序&lt;/p&gt;

&lt;p&gt;map - 从一个给定属性中映射/收集一个数组&lt;/p&gt;

&lt;p&gt;size - 返回一个数组或字符串的大小&lt;/p&gt;

&lt;p&gt;escape - 对一串字符串进行编码&lt;/p&gt;

&lt;p&gt;escape_once - 返回一个转义的html版本，而不影响现有的转义文本&lt;/p&gt;

&lt;p&gt;strip_html - 去除一串字符串中的所有html标签&lt;/p&gt;

&lt;p&gt;strip_newlines - 从字符串中去除所有换行符(\n)&lt;/p&gt;

&lt;p&gt;newline_to_br - 将所有的换行符(\n)换成 html 的换行标记&lt;/p&gt;

&lt;p&gt;replace - 匹配每一处指定字符串并替换，如 barbar #=&amp;gt; ‘barbar’&lt;/p&gt;

&lt;p&gt;replace_first - 匹配第一处指定的字符串并替换，如 foobar #=&amp;gt; ‘foobar’&lt;/p&gt;

&lt;p&gt;remove - 删除每一处匹配字符串，如 barbar #=&amp;gt; ‘barbar’&lt;/p&gt;

&lt;p&gt;remove_first - 删除第一处匹配的字符串，如 bar #=&amp;gt; ‘bar’&lt;/p&gt;

&lt;p&gt;truncate - 将一串字符串截断为x个字符&lt;/p&gt;

&lt;p&gt;truncatewords - 将一串字符串截断为x个单词&lt;/p&gt;

&lt;p&gt;prepend - 在一串字符串前面加上指定字符串，如 foobar #=&amp;gt; ‘foobar’&lt;/p&gt;

&lt;p&gt;append - 在一串字符串后面加上指定字符串，如 foobar #=&amp;gt; ‘foobar’&lt;/p&gt;

&lt;p&gt;minus - 减，如 2 #=&amp;gt; 2&lt;/p&gt;

&lt;p&gt;plus - 加，如 2 #=&amp;gt; ‘11’, 2 #=&amp;gt; 2&lt;/p&gt;

&lt;p&gt;times - 乘，如 20 #=&amp;gt; 20&lt;/p&gt;

&lt;p&gt;divided_by - 除，如 5 #=&amp;gt; 5&lt;/p&gt;

&lt;p&gt;split - 将一串字符串根据匹配模式分割成数组&lt;/p&gt;

&lt;p&gt;modulo - 余数，如 1 #=&amp;gt; 1
tag标签：&lt;/p&gt;

&lt;p&gt;assign- 创建一个变量&lt;/p&gt;

&lt;p&gt;capture- 块标记，把一些文本捕捉到一个变量中（如：把一系列字符串连接为一个字符串，并将其存储到变量中）&lt;/p&gt;

&lt;p&gt;case- 块标记，标准的 case 语句&lt;/p&gt;

&lt;p&gt;comment- 块标记，将一块文本作为注释&lt;/p&gt;

&lt;p&gt;if- 标准的 if/else 块&lt;/p&gt;

&lt;p&gt;unless- if 语句的简版&lt;/p&gt;

&lt;p&gt;include- 包含其他的模板&lt;/p&gt;

&lt;p&gt;raw- 暂时性的禁用的标签的解析（展示一些可能产生冲突的内容）&lt;/p&gt;

&lt;p&gt;cycle- 用于循环轮换值，如颜色或 DOM 类&lt;/p&gt;

&lt;p&gt;for- 用于循环 For loop（for 。。。 in 。。。  limit:int使你可以限制接受的循环项个数；offset:int可以可以让你从循环集合的第 n 项开始；reversed让你可以翻转循环）
jekyll新增的过滤器：&lt;/p&gt;

&lt;p&gt;date_to_string - 日期转化为短格式&lt;/p&gt;

&lt;p&gt;date_to_long_string - 日期转化为长格式&lt;/p&gt;

&lt;p&gt;number_of_words - 统计字数（396）&lt;/p&gt;

&lt;p&gt;array_to_sentence_string - 数组转换为句子（列举标签时：octopress and jekyll）&lt;/p&gt;

&lt;p&gt;markdownify - 将makedown格式字符串转换成HTML&lt;/p&gt;

&lt;p&gt;jsonify - data to JSON
jekyll新增标签：&lt;/p&gt;

&lt;p&gt;highlight 语言 linenos（行号，可选）- 块标签，代码高亮&lt;/p&gt;

&lt;p&gt;post_url - 使用某篇博文的超链接（不需要写文件后缀）&lt;/p&gt;

&lt;p&gt;gist - github gist显示代码（gist的介绍和使用 ）（{\% gist 5555251 \%}）&lt;/p&gt;

&lt;h1 id=&quot;4书写博客&quot;&gt;4.书写博客&lt;/h1&gt;
&lt;p&gt;引用图片或其他资源：新建一个文件夹存放，在博文中的引用方式：https://xiazemin.github.io表示站点的根目录
&lt;code class=&quot;highlighter-rouge&quot;&gt;![实例图片](https://xiazemin.github.io／assets/image.jpeg)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其他的资源引用也是一样的。&lt;/p&gt;

&lt;h1 id=&quot;5创建博文目录&quot;&gt;5.创建博文目录&lt;/h1&gt;

&lt;p&gt;一个简单的例子，使用的是Liquid模板语言。&lt;/p&gt;
&lt;ul&gt;
{\% for post in site.posts \%}
&lt;li&gt;
&lt;a href=&quot;&quot;&gt; &lt;/a&gt;
&lt;/li&gt;
{\% endfor \%}
&lt;/ul&gt;

&lt;p&gt;创建目录&lt;/p&gt;

&lt;h1 id=&quot;6分页&quot;&gt;6、分页&lt;/h1&gt;

&lt;p&gt;在_config.yml里边加一行，并填写每页需要几行：&lt;/p&gt;

&lt;p&gt;paginate:5&lt;/p&gt;

&lt;p&gt;对需要带有分页页面的配置： paginate_path:”blog/page:num”
blog/index.html将会读取这个设置，把他传给每个分页页面，然后从第2页开始输出到blog/page:num，:num是页码。如果有 12 篇文章并且做如下配置paginate: 5， Jekyll会将前 5 篇文章写入blog/index.html，把接下来的 5 篇文章写入blog/page2/index.html，最后 2 篇写入blog/page3/index.html。&lt;/p&gt;

&lt;h1 id=&quot;7草稿&quot;&gt;7、草稿&lt;/h1&gt;

&lt;p&gt;草稿是你还在创作中不想发表的文章。&lt;/p&gt;

&lt;p&gt;创建一个名为_drafts的文件夹&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-usage.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-usage.html</guid>
        
        <category>octopress</category>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>jekyll 分页</title>
        <description>&lt;p&gt;分页：&lt;/p&gt;

&lt;p&gt;vi  _config.yml&lt;/p&gt;

&lt;p&gt;添加
paginate:5
paginatepath: [‘topics/study/page/:num’,’topics/life/page/:num’]&lt;/p&gt;

&lt;p&gt;问题：
Deprecation: You appear to have pagination turned on, but you haven’t included the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; gem. Ensure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [jekyll-paginate]&lt;/code&gt; in your configuration file.&lt;/p&gt;

&lt;p&gt;解决方案：
1，gem install jekyll-paginate&lt;/p&gt;

&lt;p&gt;2，$gem list |grep jekyll-paginate
jekyll-paginate (1.1.0)&lt;/p&gt;

&lt;p&gt;3，$vi Gemfile
gem “jekyll-paginate”,”~&amp;gt; 1.1.0”&lt;/p&gt;

&lt;p&gt;4，$vi _config.yml
plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-feed&lt;/li&gt;
  &lt;li&gt;jekyll-paginate
paginate: 1
paginate_path: “page:num”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5，$ bundle install
$ bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;问题上传github 访问404&lt;/p&gt;

&lt;p&gt;$vi _config.yml&lt;/p&gt;

&lt;p&gt;baseurl: “/MyBlog” # the subpath of your site, e.g. /blog&lt;/p&gt;

&lt;p&gt;url: “https://xiazemin.github.io” # the base hostname &amp;amp; protocol for your site, e.g. http://ex&lt;/p&gt;

&lt;p&gt;问题
 Pagination: Pagination is enabled, but I couldn’t find an index.html page to use as the pagination template. Skipping pagination.&lt;/p&gt;

&lt;p&gt;$vi index.html&lt;/p&gt;

</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-page.html</link>
        <guid isPermaLink="true">https://xiazemin.github.io/MyBlog/jekyll/2017/08/05/jekyll-page.html</guid>
        
        <category>octopress</category>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
